// Generated by CoffeeScript 1.10.0
var Cell, ColorEncoder, Palette, Template, exportAll, exportSelected, generatePalette,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Cell = (function() {
  function Cell(layer1) {
    this.layer = layer1;
  }

  Cell.prototype.height = function() {
    return this.layer.frame().height();
  };

  Cell.prototype.width = function() {
    return this.layer.frame().width();
  };

  Cell.prototype.setColor = function(newColor) {
    return log("sda");
  };

  Cell.prototype.setColorName = function(newColorName) {
    return log("--A " + newTitle);
  };

  return Cell;

})();

ColorEncoder = (function() {
  ColorEncoder.prototype.encodings = ["UIColor", "UIColor", "UIColor", "UIColor", "UIColor", "UIColor"];

  function ColorEncoder(color1) {
    this.color = color1;
  }

  ColorEncoder.prototype.encodeColorWithEncoding = function(color, encoding) {
    if (indexOf.call(encodings, encoding) >= 0) {
      return call(encoding);
    } else {
      return log("Encoding not implemented.");
    }
  };

  ColorEncoder.prototype.encodeUIColorRGBASwift = function(r, g, b, a) {
    return "UIColor(red:" + (r / 255) + ", green:" + (g / 255) + ", blue:" + (b / 255) + ", alpha:" + (a / 255) + ")";
  };

  ColorEncoder.prototype.encodeUIColorRGBAObjectiveC = function(r, g, b, a) {
    return "UIColor(red:" + (r / 255) + ", green:" + (g / 255) + ", blue:" + (b / 255) + ", alpha:" + (a / 255) + ")";
  };

  return ColorEncoder;

})();

generatePalette = function(context) {
  var palette;
  log("Generating...");
  palette = new Palette(context);
  return palette.generate();
};

exportSelected = function(context) {
  var selections;
  log("Exporting Colors...");
  return selections = context.selection;
};

exportAll = function(context) {
  return log("exporting...");
};

Palette = (function() {
  Palette.prototype.paletteTag = "palette";

  Palette.prototype.spacingBetweenPalette = 16;

  Palette.prototype.spacingBetweenCells = 35;

  Palette.prototype.colorsPerRow = 4;

  function Palette(context1) {
    var i, j, layer, layers, ref;
    this.context = context1;
    this.document = this.context.document;
    this.command = this.context.command;
    this.currentPage = this.context.document.currentPage();
    this.colors = this.context.document.documentData().assets().primitiveColors();
    this.pluginID = this.context.plugin.identifier();
    this.paletteArtboard = null;
    layers = this.currentPage.children();
    for (i = j = 0, ref = layers.count(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      layer = layers[i];
      if (this.command.valueForKey_onLayer_forPluginIdentifier(this.paletteTag, layer, this.pluginID)) {
        log("FOUND Palette!");
        this.paletteArtboard = layer;
      }
    }
    this.document.showMessage("Palette generated!");
  }

  Palette.prototype.generate = function() {
    var cell, color, height, i, j, ref, results, rows, template, width;
    template = new Template(this.context.plugin.url());
    if (!this.paletteArtboard) {
      log("New palette...");
      this.paletteArtboard = template.getArtboard();
      this.paletteArtboard.setName('Prism Palette');
      this.currentPage.addLayers([this.paletteArtboard]);
      this.command.setValue_forKey_onLayer_forPluginIdentifier(true, this.paletteTag, this.paletteArtboard, this.pluginID);
    }
    rows = Math.ceil(this.colors.count() / this.colorsPerRow);
    cell = new Cell(template.getCell());
    height = rows * (this.spacingBetweenCells + cell.height());
    height += this.spacingBetweenCells;
    width = Math.min(this.colorsPerRow, this.colors.count()) * (this.spacingBetweenCells + cell.width());
    width += this.spacingBetweenCells;
    this.paletteArtboard.frame().setHeight(height);
    this.paletteArtboard.frame().setWidth(width);
    results = [];
    for (i = j = 0, ref = rows; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      color = this.colors[i];
      cell = new Cell(template.getCell());
      cell.setColor(color);
      results.push(cell.setColorName("Ment"));
    }
    return results;
  };

  Palette.prototype.getCells = function() {
    var layer, layers;
    return layers = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = layers.length; j < len; j++) {
        layer = layers[j];
        results.push(new Cell(layer));
      }
      return results;
    })();
  };

  Palette.prototype.aliasForColor = function(color) {
    return this.command.valueForKey_onLayer_forPluginIdentifier(color, this.paletteArtboard, this.pluginID);
  };

  Palette.prototype.setColorAlias = function(color, alias) {
    return this.command.setValue_forKey_onLayer_forPluginIdentifier(alias, color, this.paletteArtboard, this.pluginID);
  };

  Palette.prototype.removeColorAlias = function(color) {
    return this.command.setValue_forKey_onLayer_forPluginIdentifier(null, color, this.paletteArtboard, this.pluginID);
  };

  return Palette;

})();

Template = (function() {
  Template.prototype.templateFileName = "Template.sketch";

  Template.prototype.artboardName = "Prism Palette";

  Template.prototype.cellName = "Cell";

  function Template(pluginURL) {
    var url;
    this.app = NSApplication.sharedApplication();
    url = pluginURL.URLByAppendingPathComponent(this.templateFileName);
    this.document = MSDocument.alloc().init();
    if (!this.document.readFromURL_ofType_error(url, "com.bohemiancoding.sketch.drawing", nil)) {
      this.app.displayDialog_withTitle("There was an error loading the Prism cell template file. Make sure a valid '" + this.templateFileName + "' file is inside the 'Prism.sketchplugin' folder.", "Oops!");
    }
  }

  Template.prototype.getCell = function() {
    return this.getLayerByName(this.cellName).duplicate();
  };

  Template.prototype.getArtboard = function() {
    return this.getLayerByName(this.artboardName).duplicate();
  };

  Template.prototype.getLayerByName = function(name) {
    var i, j, layer, layers, ref;
    layers = this.document.currentPage().children();
    for (i = j = 0, ref = layers.count(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      layer = layers[i];
      if (("" + (layer.name())) === name) {
        return layer;
      }
    }
    this.app.displayDialog_withTitle("Couln't find the layer named " + name + " in the Template file.", "Cannot generate the palette");
    return null;
  };

  return Template;

})();
