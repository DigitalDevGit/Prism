// Generated by CoffeeScript 1.10.0
var colorNameChanged, exportAll, exportSelected, generatePalette;

generatePalette = function(context) {
  var palette;
  log("Generating...");
  palette = new Palette(context);
  return palette.generate();
};

colorNameChanged = function(context) {
  var artboard, children, colorClassifier, colorValue, finalName, i, isArtboard, j, layer, newText, pluginID, ref, results, textLayer;
  log("Alias...");
  textLayer = context.actionContext.layer;
  artboard = textLayer.parentArtboard();
  newText = context.actionContext["new"];
  pluginID = context.plugin.identifier();
  colorValue = context.command.valueForKey_onLayer_forPluginIdentifier(Cell.prototype.TEXT_LAYER_TAG, textLayer, pluginID);
  isArtboard = context.command.valueForKey_onLayer_forPluginIdentifier(Palette.prototype.ARTBOARD_TAG, artboard, pluginID);
  if (!(colorValue && isArtboard)) {
    return;
  }
  finalName = ("" + newText) !== "-" ? (log("Saving alias: " + newText + " for color: " + colorValue + "."), log("---> " + artboard + " or " + pluginID), context.command.setValue_forKey_onLayer_forPluginIdentifier(newText, colorValue, artboard, pluginID), newText) : (log("Removing alias for color: " + colorValue + "."), context.command.setValue_forKey_onLayer_forPluginIdentifier(null, colorValue, artboard, pluginID), colorClassifier = new ColorClassifier(), colorClassifier.classify(colorValue));
  children = artboard.children();
  results = [];
  for (i = j = 0, ref = children.count(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    layer = children[i];
    if (context.command.valueForKey_onLayer_forPluginIdentifier(Cell.prototype.CELL_LAYER_TAG, layer, pluginID) === colorValue) {
      layer.setName(finalName);
    }
    if (context.command.valueForKey_onLayer_forPluginIdentifier(Cell.prototype.TEXT_LAYER_TAG, layer, pluginID) === colorValue) {
      results.push(layer.stringValue = finalName);
    } else {
      results.push(void 0);
    }
  }
  return results;
};

exportSelected = function(context) {
  var selectedLayers;
  log("Exporting Colors...");
  selectedLayers = context.document.selectedLayers;
  return log(selectedLayers);
};

exportAll = function(context) {
  var allColors, colorEncoder, colorsString, filePath, fileString, palette, pasteboard, response, savePanel;
  log("exporting...");
  palette = new Palette(context);
  allColors = palette.getColors();
  log("-->+++++ " + allColors);
  colorEncoder = new ColorEncoder();
  response = colorEncoder.displayEncodingSelectionDialog();
  colorsString = colorEncoder.nsStringFromColors_withEncoding(allColors, response.encoding);
  log("--> " + colorsString);
  switch (response.code) {
    case 1000:
      log("Saving...");
      savePanel = NSSavePanel.savePanel();
      savePanel.setNameFieldStringValue("colors.txt");
      savePanel.setExtensionHidden(false);
      if (savePanel.runModal()) {
        filePath = savePanel.URL().path();
        fileString = NSString.stringWithString(colorsString);
        return fileString.writeToFile_atomically_encoding_error(filePath, true, NSUTF8StringEncoding, null);
      }
      break;
    case 1001:
      log("Copying...");
      pasteboard = NSPasteboard.generalPasteboard();
      pasteboard.declareTypes_owner([NSPasteboardTypeString], null);
      return pasteboard.setString_forType(colorsString, NSPasteboardTypeString);
  }
};
