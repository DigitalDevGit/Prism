// Generated by CoffeeScript 1.10.0
var Palette;

Palette = (function() {
  Palette.prototype.ARTBOARD_TAG = "artboard";

  Palette.prototype.cellTag = "cell";

  Palette.prototype.cellIndex = "index";

  Palette.prototype.spacingBetweenPalette = 26;

  Palette.prototype.spacingBetweenCells = 30;

  Palette.prototype.colorsPerRow = 4;

  function Palette(context) {
    var children, i, j, layer, ref;
    this.context = context;
    this.document = this.context.document;
    this.command = this.context.command;
    this.currentPage = this.context.document.currentPage();
    this.colors = this.context.document.documentData().assets().primitiveColors().array();
    this.pluginID = this.context.plugin.identifier();
    this.template = new Template(this.context.plugin.url());
    children = this.currentPage.children();
    for (i = j = 0, ref = children.count(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      layer = children[i];
      if (this.command.valueForKey_onLayer_forPluginIdentifier(this.ARTBOARD_TAG, layer, this.pluginID)) {
        log("FOUND Palette!");
        this.artboard = layer;
      }
    }
  }

  Palette.prototype.generate = function() {
    var bounds, cell, color, column, i, j, ref, row;
    if (!this.artboard) {
      log("New palette...");
      this.artboard = this.template.getArtboard();
      if (this.colors.count() > 0) {
        this.artboard.removeAllLayers();
      }
      this.command.setValue_forKey_onLayer_forPluginIdentifier(true, this.ARTBOARD_TAG, this.artboard, this.pluginID);
    } else {
      log("Old palette...");
      bounds = this.artboard.frame();
      this.artboard.removeAllLayers();
    }
    row = 0;
    column = 0;
    for (i = j = 0, ref = this.colors.count(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (column >= this.colorsPerRow) {
        column = 0;
        row++;
      }
      color = this.colors[i];
      cell = new Cell(this.template.getCell(), this.context);
      cell.setColor_withAlias(color, this.aliasForColor(color));
      cell.setX((cell.width + this.spacingBetweenCells) * column + this.spacingBetweenCells);
      cell.setY((cell.height + this.spacingBetweenCells) * row + this.spacingBetweenCells);
      this.artboard.addLayers([cell.layer]);
      column++;
    }
    this.artboard.frame().setHeight((cell.height + this.spacingBetweenCells) * (row + 1) + this.spacingBetweenCells);
    this.artboard.frame().setWidth((cell.width + this.spacingBetweenCells) * Math.min(this.colors.count(), this.colorsPerRow) + this.spacingBetweenCells);
    this.artboard.removeFromParent();
    bounds = this.currentPage.contentBounds();
    this.artboard.frame().setX(bounds.origin.x - this.artboard.frame().width() - this.spacingBetweenPalette);
    this.artboard.frame().setY(bounds.origin.y);
    return this.currentPage.addLayers([this.artboard]);
  };

  Palette.prototype.getColors = function() {
    var children, colorDictionary, colors, colr, i, j, layer, ref;
    colors = [];
    children = this.artboard.children();
    for (i = j = 0, ref = children.count(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      layer = children[i];
      colorDictionary = this.command.valueForKey_onLayer_forPluginIdentifier(Cell.prototype.FULL_COLOR_TAG, layer, this.pluginID);
      if (colorDictionary) {
        log("->> PORQUI " + colorDictionary);
        colr = ColorEncoder.dictionaryToMSColor(colorDictionary);
        log("NCOS..." + colr);
        colors.push(colr);
      }
    }
    return colors;
  };

  Palette.prototype.aliasForColor = function(color) {
    return this.command.valueForKey_onLayer_forPluginIdentifier(color.hexValue(), this.artboard, this.pluginID);
  };

  return Palette;

})();
