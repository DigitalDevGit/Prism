// Generated by CoffeeScript 1.10.0
var ColorEncoder,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ColorEncoder = (function() {
  function ColorEncoder() {}

  ColorEncoder.prototype.ENCODINGS = ["HEX", "RGBA_CSS"];

  ColorEncoder.prototype.displayEncodingSelectionDialog = function() {
    var accessory, alert, response, responseCode, sel, selectedItemIndex;
    selectedItemIndex = selectedItemIndex || 0;
    accessory = NSComboBox.alloc().initWithFrame(NSMakeRect(0, 0, 400, 25));
    accessory.addItemsWithObjectValues(this.ENCODINGS);
    accessory.selectItemAtIndex(selectedItemIndex);
    alert = NSAlert.alloc().init();
    alert.setMessageText("Export colors");
    alert.setInformativeText("Select the color format:");
    alert.addButtonWithTitle('Save to file...');
    alert.addButtonWithTitle('Copy to clipboard');
    alert.addButtonWithTitle('Cancel');
    alert.setAccessoryView(accessory);
    responseCode = alert.runModal();
    sel = accessory.indexOfSelectedItem();
    response = {
      code: responseCode,
      encoding: this.ENCODINGS[sel]
    };
    return response;
  };

  ColorEncoder.prototype.encodeColorWithEncoding = function(color, encoding) {
    if (indexOf.call(this.ENCODINGS, encoding) >= 0) {
      return eval("this.encode" + encoding + "(color);");
    } else {
      log("'" + encoding + "' encoding not implemented.");
      return null;
    }
  };

  ColorEncoder.msColorToDictionary = function(color) {
    var dictionary;
    return dictionary = {
      red: color.red(),
      blue: color.blue(),
      green: color.green(),
      alpha: color.alpha()
    };
  };

  ColorEncoder.dictionaryToMSColor = function(dic) {
    var colr;
    return colr = MSColor.colorWithRed_green_blue_alpha(dic.red, dic.green, dic.blue, dic.alpha);
  };

  ColorEncoder.prototype.nsStringFromColors_withEncoding = function(colors, encoding) {
    var c, i, len, lines;
    lines = [];
    for (i = 0, len = colors.length; i < len; i++) {
      c = colors[i];
      lines.push(this.encodeColorWithEncoding(c, encoding));
    }
    return lines.join("\n");
  };

  ColorEncoder.prototype.encodeHEX = function(color) {
    return '#' + color.hexValue();
  };

  ColorEncoder.prototype.encodeRGBA_CSS = function(color) {
    var alpha;
    alpha = color.alpha() < 1 ? color.alpha().toFixed(2) : color.alpha();
    return "rgba(" + (Math.round(color.red() * 255)) + "," + (Math.round(color.green() * 255)) + "," + (Math.round(color.blue() * 255)) + "," + alpha + ")";
  };

  ColorEncoder.prototype.encodeUIColorRGBASwift = function(r, g, b, a) {
    return "UIColor(red:" + (r / 255) + ", green:" + (g / 255) + ", blue:" + (b / 255) + ", alpha:" + (a / 255) + ")";
  };

  return ColorEncoder;

})();
